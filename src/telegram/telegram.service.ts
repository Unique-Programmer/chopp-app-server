import { Injectable, Logger, OnModuleInit, Inject } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { HttpService } from '@nestjs/axios';
import { lastValueFrom } from 'rxjs';
import { UsersService } from '../users/users.service';

@Injectable()
export class TelegramService implements OnModuleInit {
  private readonly logger = new Logger(TelegramService.name);
  private readonly botToken: string;
  private readonly apiUrl: string;

  constructor(
    private readonly configService: ConfigService,
    private readonly httpService: HttpService,
    private readonly usersService: UsersService,
  ) {
    this.botToken = this.configService.get<string>('TELEGRAM_BOT_TOKEN');
    this.apiUrl = `https://api.telegram.org/bot${this.botToken}`;
  }

  async onModuleInit() {
    this.logger.log('Telegram bot initializing...');

    if (!this.botToken) {
      this.logger.error('TELEGRAM_BOT_TOKEN not found in .env file');
      return;
    }

    this.startPolling();
    this.logger.log('Telegram bot started successfully');
  }

  private async startPolling() {
    let offset = 0;
  
    const poll = async () => {
      const response = await lastValueFrom(
        this.httpService.get(`${this.apiUrl}/getUpdates`, {
          params: {
            offset,
            timeout: 30,
            allowed_updates: JSON.stringify(['message']),
          },
        }),
      );

      const updates = response.data.result;
      if (updates && updates.length > 0) {
        for (const update of updates) {
          await this.handleUpdate(update);
          offset = update.update_id + 1;
        }
      }

      setTimeout(poll, 1000);
    };

    poll();
  }

  async sendCode(phoneNumber: string, code: string): Promise<void> {
    const user = await this.usersService.getUserByFieldName(phoneNumber, 'phoneNumber');

    if (!user.telegramUserId) {
      this.logger.log('This user has not logged into the bot yet, we are waiting for him');
      return;
    }

    await this.sendMessage(
      user.telegramUserId,
      `üîë <b>–í–∞—à –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:</b> <code>${code}</code>\n\n‚è±Ô∏è –ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç.\n\nüîí <i>–ù–∏–∫–æ–º—É –Ω–µ —Å–æ–æ–±—â–∞–π—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –≤ —Ü–µ–ª—è—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.</i>`,
    );
  }

  async sendMessage(chatId: string, text: string): Promise<void> {
    await lastValueFrom(
      this.httpService.post(`${this.apiUrl}/sendMessage`, {
        chat_id: chatId,
        text,
        parse_mode: 'HTML',
      }),
    );
  }

  async sendContact(chatId: string, phoneNumber: string): Promise<void> {
    const user = await this.usersService.getUserByFieldName(phoneNumber, 'phoneNumber');
    if (!user) {
      await this.sendMessage(
        chatId,
        '‚ùå <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!</b>\n\n–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n‚Ä¢ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –µ—â–µ –Ω–µ –≤–Ω–µ—Å–µ–Ω –≤ —Å–∏—Å—Ç–µ–º—É\n‚Ä¢ –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞\n\nüì≤ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ "–í–æ–π—Ç–∏" –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω—É –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ Chopp [—Å—Å—ã–ª–∫–∞].',
      );
      return;
    }

    if (user.telegramUserId) {
      await this.sendMessage(
        chatId,
        '‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b>\n\n–í—ã —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–ª–∏ —ç—Ç–æ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫ Telegram.\n\n–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.',
      );
      return;
    }

    await user.update({ telegramUserId: chatId });
    await this.sendMessage(
      chatId,
      'üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b>\n\nüì≤ –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ Telegram.\n\nüîê –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ Chopp.',
    );
  }

  private async handleUpdate(update: any): Promise<void> {
    if (update.message?.contact) {
      const chatId = update.message.chat.id.toString();
      const phoneNumber = update.message.contact.phone_number;
      await lastValueFrom(
        this.httpService.post(`${this.apiUrl}/sendMessage`, {
          chat_id: chatId,
          text: '–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞...',
          reply_markup: {
            remove_keyboard: true,
          },
        }),
      );

      await this.sendContact(chatId, phoneNumber);
    }

    if (update.message && update.message.text) {
      const chatId = update.message.chat.id.toString();
      const text = update.message.text;

      if (text === '/start') {
        await this.sendMessage(
          chatId,
          'üëã <b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é!</b>\n\nüîê –Ø –±–æ—Ç –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ —Å–µ—Ä–≤–∏—Å–µ Chopp.\n\n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá',
        );

        await lastValueFrom(
          this.httpService.post(`${this.apiUrl}/sendMessage`, {
            chat_id: chatId,
            text: 'üì± –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–∞—à–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n\n–≠—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ Chopp.',
            reply_markup: {
              keyboard: [
                [
                  {
                    text: 'üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
                    request_contact: true,
                  },
                ],
              ],
              resize_keyboard: true,
              one_time_keyboard: true,
            },
          }),
        );
      }
    }
  }
}
